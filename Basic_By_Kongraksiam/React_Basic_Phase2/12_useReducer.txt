/*
    useReducer
        ** เป็นการจัดการ State ในรูปแบบของ Redux
        โดยทั่วไป State สามารถอ่านค่าได้อย่างเดียว ถ้าต้องการอยากจะเปลี่ยนแปลงค่า State จะใช้ useReducer โดยการกำหนดรูปแบบการกระทำที่เกิดขึ้นกับ State ของเราผ่านส่วนที่เรียกว่า Action
*/

/* 
    App.js file
        import Transection form "Transection";
        import FormComponent form "FormComponent";
        import {useState, useEffect, useReducer} form "react";  //import
        import DataContext form "DataContext"; 

        function App() {

            const [items, setItems] = useState([])

            const [reportIncome, setReportIncome] = useState(0)
            const [reportExpense, setReportExpense] = useState(0)

            useEffect(() => {
                const amounts = items.map(items => item.amount)

                const income = amounts.filter(element => element>0).reduce((total,element)=> total+=element, 0)

                const expense = (amounts.filter(element => element<0).reduce((total,element)=> total+=element, 0))*(-1)

                setReportIncome(income)
                setReportExpense(expense)

            }, [items, reportIncome, reportExpense])

            const onAddNewItem = (newItem) =>{
                setItems((prevItem) => {
                    return [newItem,...prevItem]
                })
            }

            // Reducer State
            const [count, setCount] = useState(0)
            coust reducer = (state, action) => {
                switch (action.type){
                    case "ADD":
                        return state+action.payload
                    case "SUB":
                        return state-action.payload
                    case "CLEAR":
                        return 0
                }
            }
            const [result, dispatch] = useReducer(reducer, count)

            return (
                <div>
                    <h1>{result}</h1>
                    <button onClick={()=>dispatch({type:"ADD", payload:10})}>เพิ่ม</button>
                    <button onClick={()=>dispatch({type:"SUB", payload:5})}>ลบ</button>
                    <button onClick={()=>dispatch({type:"CLEAR"})}>ล้าง</button>
                </div>
            );
        }
        export default App;

*/

/*  ตัวอย่างประยุกต์
    App.js file
        import Transection form "Transection";
        import FormComponent form "FormComponent";
        import {useState, useEffect, useReducer} form "react";  //import
        import DataContext form "DataContext";      

        function App() {

            const [items, setItems] = useState([])

            const [reportIncome, setReportIncome] = useState(0)
            const [reportExpense, setReportExpense] = useState(0)

            useEffect(() => {
                const amounts = items.map(items => item.amount)

                const income = amounts.filter(element => element>0).reduce((total,element)=> total+=element, 0)

                const expense = (amounts.filter(element => element<0).reduce((total,element)=> total+=element, 0))*(-1)

                setReportIncome(income)
                setReportExpense(expense)

            }, [items, reportIncome, reportExpense])

            const onAddNewItem = (newItem) =>{
                setItems((prevItem) => {
                    return [newItem,...prevItem]
                })
            }

            // Reducer State
            const [showReport, setShowReport] = useState(false)
            coust reducer = (state, action) => {
                switch (action.type){
                    case "SHOW":
                        return setShowReport(true)
                    case "HIDE":
                        return setShowReport(false)
                }
            }
            const [result, dispatch] = useReducer(reducer, showReport)

            return (
                <DataContext.Provider value={   //ส่งเป็น object
                    {
                        income : reportIncome,
                        expense : reportExpense
                    }
                }>   
                    <div>
                        <h1>แอพบัญชีรายรับรายจ่าย</h1>
                        {showReport && <ReportData/>}
                        <FormComponent onAddItem = {onAddNewItem}/>
                        <Transection item = {items}/>

                        <button onClick={()=>dispatch({type:"SHOW"})}>แสดง</button>
                        <button onClick={()=>dispatch({type:"HIDE",})}>ซ่อน</button>
                    </div>
                </DataContext.Provider>
                    
            );
        }
        export default App;

*/